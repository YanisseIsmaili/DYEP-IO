//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/contorl/PlayerInputeAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputeAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputeAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputeAction"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""67c1704a-314e-444c-9775-756588793907"",
            ""actions"": [
                {
                    ""name"": ""MoveHorizontal_P2"",
                    ""type"": ""Value"",
                    ""id"": ""a46da402-7ec5-412b-ba6c-4f3a5215f87a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveVertical_P2"",
                    ""type"": ""Value"",
                    ""id"": ""d3384936-ddc2-4625-a878-8595f1a07d0a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveHorizontal_P1"",
                    ""type"": ""Value"",
                    ""id"": ""ade41114-f6fe-47d5-a5ee-de47e5cf2f48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveVertical_P1"",
                    ""type"": ""Value"",
                    ""id"": ""c7379b3e-f094-49d3-8610-95c303b1aeb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a45e80a-e704-42d6-984c-9048fefd7378"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81f02ff8-2c96-4db7-9839-aa3b8e0918a7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical_P2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f3f3508-90fd-4075-a608-b55adaff3adc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal_P1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac8bf6b3-c2e4-4707-b1b1-1c2fc3583053"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical_P1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveHorizontal_P2 = m_Gameplay.FindAction("MoveHorizontal_P2", throwIfNotFound: true);
        m_Gameplay_MoveVertical_P2 = m_Gameplay.FindAction("MoveVertical_P2", throwIfNotFound: true);
        m_Gameplay_MoveHorizontal_P1 = m_Gameplay.FindAction("MoveHorizontal_P1", throwIfNotFound: true);
        m_Gameplay_MoveVertical_P1 = m_Gameplay.FindAction("MoveVertical_P1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_MoveHorizontal_P2;
    private readonly InputAction m_Gameplay_MoveVertical_P2;
    private readonly InputAction m_Gameplay_MoveHorizontal_P1;
    private readonly InputAction m_Gameplay_MoveVertical_P1;
    public struct GameplayActions
    {
        private @PlayerInputeAction m_Wrapper;
        public GameplayActions(@PlayerInputeAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveHorizontal_P2 => m_Wrapper.m_Gameplay_MoveHorizontal_P2;
        public InputAction @MoveVertical_P2 => m_Wrapper.m_Gameplay_MoveVertical_P2;
        public InputAction @MoveHorizontal_P1 => m_Wrapper.m_Gameplay_MoveHorizontal_P1;
        public InputAction @MoveVertical_P1 => m_Wrapper.m_Gameplay_MoveVertical_P1;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @MoveHorizontal_P2.started += instance.OnMoveHorizontal_P2;
            @MoveHorizontal_P2.performed += instance.OnMoveHorizontal_P2;
            @MoveHorizontal_P2.canceled += instance.OnMoveHorizontal_P2;
            @MoveVertical_P2.started += instance.OnMoveVertical_P2;
            @MoveVertical_P2.performed += instance.OnMoveVertical_P2;
            @MoveVertical_P2.canceled += instance.OnMoveVertical_P2;
            @MoveHorizontal_P1.started += instance.OnMoveHorizontal_P1;
            @MoveHorizontal_P1.performed += instance.OnMoveHorizontal_P1;
            @MoveHorizontal_P1.canceled += instance.OnMoveHorizontal_P1;
            @MoveVertical_P1.started += instance.OnMoveVertical_P1;
            @MoveVertical_P1.performed += instance.OnMoveVertical_P1;
            @MoveVertical_P1.canceled += instance.OnMoveVertical_P1;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @MoveHorizontal_P2.started -= instance.OnMoveHorizontal_P2;
            @MoveHorizontal_P2.performed -= instance.OnMoveHorizontal_P2;
            @MoveHorizontal_P2.canceled -= instance.OnMoveHorizontal_P2;
            @MoveVertical_P2.started -= instance.OnMoveVertical_P2;
            @MoveVertical_P2.performed -= instance.OnMoveVertical_P2;
            @MoveVertical_P2.canceled -= instance.OnMoveVertical_P2;
            @MoveHorizontal_P1.started -= instance.OnMoveHorizontal_P1;
            @MoveHorizontal_P1.performed -= instance.OnMoveHorizontal_P1;
            @MoveHorizontal_P1.canceled -= instance.OnMoveHorizontal_P1;
            @MoveVertical_P1.started -= instance.OnMoveVertical_P1;
            @MoveVertical_P1.performed -= instance.OnMoveVertical_P1;
            @MoveVertical_P1.canceled -= instance.OnMoveVertical_P1;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMoveHorizontal_P2(InputAction.CallbackContext context);
        void OnMoveVertical_P2(InputAction.CallbackContext context);
        void OnMoveHorizontal_P1(InputAction.CallbackContext context);
        void OnMoveVertical_P1(InputAction.CallbackContext context);
    }
}
